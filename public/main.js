import Enemy from "./enemy.js";
import Player from "./player.js";
import Bullet from "./bullet.js";
import Asteroid from "./asteroid.js";

const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

const bullets = []; // ‚úÖ –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–Ω–∞—Ä—è–¥—ñ–≤
const enemies = []; // –ú–∞—Å–∏–≤ –¥–ª—è –≤–æ—Ä–æ–≥—ñ–≤
const asteroids = []; // –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–ª—è –∞—Å—Ç–µ—Ä–æ—ó–¥—ñ–≤
const player = new Player(canvas, bullets); // –ü–µ—Ä–µ–¥–∞—î–º–æ bullets —É Player ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–≤—Ü—è

console.log("üëæ –í—Å—ñ –≤–æ—Ä–æ–≥–∏:", enemies);
console.log("üéØ –ú–∞—Å–∏–≤ –∫—É–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ:", bullets);

function spawnEnemy() {
  const x = Math.random() * (canvas.width - 50);
  const enemy = new Enemy(canvas, x, 0);
  enemies.push(enemy);
  console.log("üëæ –ù–æ–≤–∏–π –≤–æ—Ä–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", {
    x,
    y: enemy.y,
    total: enemies.length,
  });
}
setInterval(spawnEnemy, 2000); // ‚úÖ –°–ø–∞–≤–Ω–∏–º–æ –≤–æ—Ä–æ–≥–∞ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏

function spawnAsteroid() {
  const x = Math.random() * (canvas.width - 60);
  const speed = 1 + Math.random() * 2;
  asteroids.push(new Asteroid(canvas, x, -60, speed));
}

setInterval(spawnAsteroid, 3500); // –°–ø–∞–≤–Ω –∫–æ–∂–Ω—ñ 3.5 —Å–µ–∫

// üéÆ –ì–æ–ª–æ–≤–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª

function gameLoop() {
  console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏"); // –õ–æ–≥ –∫–æ–∂–Ω–æ–≥–æ –∫–∞–¥—Ä—É!
  ctx.clearRect(0, 0, canvas.width, canvas.height); // –û—á–∏—â—É—î–º–æ –µ–∫—Ä–∞–Ω

  bullets.forEach((bullet, index) => {
    // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—Å–∏–≤ bullets
    bullet.move(); // üî• –†—É—Ö –∫—É–ª—ñ
    console.log("üéØ –ö—É–ª—è —Ä—É—Ö–∞—î—Ç—å—Å—è, –Ω–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y:", bullet.y);
    bullet.draw(); // üî• –ú–∞–ª—é—î–º–æ –∫—É–ª—é
    console.log("üé® –ú–∞–ª—é—î–º–æ –∫—É–ª—é –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó:", bullet.x, bullet.y);

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫—É–ª—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –∑–Ω–∏–∫–ª–∞ (–≤–∏–±—É—Ö–Ω—É–ª–∞),
    // —è–∫—â–æ –≤–æ–Ω–∞ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É
    if (bullet.isOutOfScreen()) {
      bullets.splice(index, 1);
    }

    asteroids.forEach((asteroid, index) => {
      asteroid.move();
      asteroid.draw();
    
      if (asteroid.y > canvas.height) {
        asteroids.splice(index, 1); // –í–∏–¥–∞–ª–∏—Ç–∏, —è–∫—â–æ –≤–∏–π—à–æ–≤ –∑–∞ –º–µ–∂—ñ
      }
    });    
  });

  //‚úÖ –†—É—Ö–∞—î–º–æ —Ç–∞ –º–∞–ª—é—î–º–æ –≤—Å—ñ—Ö –≤–æ—Ä–æ–≥—ñ–≤
  enemies.forEach((enemy, index) => {
    enemy.move();
    enemy.draw();

    if (enemy.y > canvas.height) {
      enemies.splice(index, 1); // –í–∏–¥–∞–ª—è—î–º–æ –≤–æ—Ä–æ–≥–∞, —è–∫—â–æ –≤—ñ–Ω –∑–Ω–∏–∫ –∑–∞ –º–µ–∂–∞–º–∏ –µ–∫—Ä–∞–Ω—É
    }
  });

  player.draw(); // ‚úÖ –ú–∞–ª—é—î–º–æ –≥—Ä–∞–≤—Ü—è

  requestAnimationFrame(gameLoop);
}

// üéÆ –î–æ–¥–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü–µ–º
window.addEventListener("keydown", (event) => {
  if (event.key === "ArrowLeft") player.move("left");
  if (event.key === "ArrowRight") player.move("right");
  if (event.key === " ") player.shoot();
  if (event.key === "w") player.changeWeapon();
});

// ‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
gameLoop();

function checkCollisions() {
  bullets.forEach((bullet, bulletIndex) => {
    // üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bullets
    enemies.forEach((enemy, enemyIndex) => {
      if (collisionDetected(enemy, bullet)) {
        console.log("üí• –í–ª—É—á–µ–Ω–Ω—è! –í–∏–¥–∞–ª—è—î–º–æ –≤–æ—Ä–æ–≥–∞ —Ç–∞ –∫—É–ª—é.");
        explodeProjectile(bullet); // –î–æ–¥–∞—î–º–æ –≤–∏–±—É—Ö –¥–æ –º—ñ—Å—Ü—è –ø–æ–ø–∞–¥–∞–Ω–Ω—è

        //explodeProjectile(enemy.x, enemy.y);

        // –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–æ—Ä–æ–≥–∞
        enemies.splice(enemyIndex, 1);

        // –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å–Ω–∞—Ä—è–¥
        bullets.splice(bulletIndex, 1);
      }
    });
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∞—Å—Ç–µ—Ä–æ—ó–¥—ñ–≤
bullets.forEach((bullet, bulletIndex) => {
  asteroids.forEach((asteroid, asteroidIndex) => {
    if (collisionDetected(asteroid, bullet)) {
      console.log("üí• –í–ª—É—á–µ–Ω–Ω—è –≤ –∞—Å—Ç–µ—Ä–æ—ó–¥!");
      explodeProjectile(bullet.x, bullet.y);
      bullets.splice(bulletIndex, 1);
      asteroids.splice(asteroidIndex, 1);
    }
  });
});
}

checkCollisions(); // üî• –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–ø–∞–¥–∞–Ω—å

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±—É—Ö—É —Å–Ω–∞—Ä—è–¥–∞
function explodeProjectile(x, y) {
  let explosion = document.createElement("div");
  explosion.classList.add("explosion");
  explosion.style.left = `${x}px`;
  explosion.style.top = `${y}px`;

  document.body.appendChild(explosion);

  setTimeout(() => {
    explosion.remove();
  }, 300); // –í–∏–±—É—Ö —Ç—Ä–∏–≤–∞—î 0.3 —Å–µ–∫—É–Ω–¥–∏
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –º—ñ–∂ –∫—É–ª–µ—é —Ç–∞ –≤–æ—Ä–æ–≥–æ–º
function collisionDetected(enemy, bullet) {
  console.log(
    `üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è: bullet(${bullet.x}, ${bullet.y}) vs enemy(${enemy.x}, ${enemy.y})`
  );
  console.log(
    `üîç –†–æ–∑–º—ñ—Ä–∏: bullet(${bullet.width}, ${bullet.height}) vs enemy(${enemy.width}, ${enemy.height})`
  );

  return (
    bullet.x < enemy.x + enemy.width &&
    bullet.x + bullet.width > enemy.x &&
    bullet.y < enemy.y + enemy.height &&
    bullet.y + bullet.height > enemy.y
  );
}

// function explodeProjectile(x, y) {
//   const explosion = new Image();
//   explosion.src = "assets/images/explosion.png"; // –®–ª—è—Ö –¥–æ —Å–ø—Ä–∞–π—Ç–∞ –≤–∏–±—É—Ö—É
//   explosion.onload = () => {
//     ctx.drawImage(explosion, x, y, 50, 50); // –ú–∞–ª—é—î–º–æ –≤–∏–±—É—Ö
//     setTimeout(() => {
//       ctx.clearRect(x, y, 50, 50); // –û—á–∏—â–∞—î–º–æ –≤–∏–±—É—Ö —á–µ—Ä–µ–∑ 0.3 —Å–µ–∫—É–Ω–¥–∏
//     }, 300);
//   };
// }

// function explodeProjectile(bullet) {
// bullet.image.src = "assets/images/explosion.png"; // –ú—ñ–Ω—è—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –≤–∏–±—É—Ö
// bullet.width = 30;
// bullet.height = 30;
// bullet.explode(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –≤–∏–±—É—Ö—É —Å–Ω–∞—Ä—è–¥–∞

// setTimeout(() => {
// bullets.splice(bullets.indexOf(bullet), 1); // –í–∏–¥–∞–ª—è—î–º–æ –∫—É–ª—é –∑ –º–∞—Å–∏–≤—É
// }, 300); // –í–∏–±—É—Ö —Ç—Ä–∏–≤–∞—î 0.3 —Å–µ–∫—É–Ω–¥–∏
// } // –í–∏–±—É—Ö —Å–Ω–∞—Ä—è–¥–∞
